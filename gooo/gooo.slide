Object Orientation in Go
What is object orientation anyway ? Does it matter ?
21 Apr 2018
Tags: software development, software design, paradigms

Tiago Katcipis
Programmer, Neoway
tiagokatcipis@gmail.com
http://github.com/katcipis
@tiagokatcipis


* Origins of Object Orientation

- Every "new" thing usually has more than one influence
- It is hard to pinpoint the origin of an idea
- But people insist on being pedantic =D
- Ranting like "Go is not OO"
- So lets be pedantic too


* Who is this guy ?

.image ./img/kay.jpg


* Who is this guy ?

.image ./img/kay2.jpg _ 900


* Alan Kay on Object Orientation

At Utah sometime after Nov 66 when, influenced by Sketchpad, Simula, 
the design for the ARPAnet, the Burroughs B5000, and my
*background* in *Biology* and *Mathematics* , I thought of an architecture for 
programming.

It was probably in *1967* when someone asked me what I was 
doing, and I said: "It's *object-oriented* programming".


* Alan Kay on Object Orientation

I thought of objects being like *biological* *cells* and/or individual 
computers on a network, only able to *communicate* with *messages*.

The term *"polymorphism"* was imposed much later (I think by Peter Wegner) and 
it isn't quite valid, since it really comes from the nomenclature of 
functions, and I wanted quite a bit more than functions.


* Alan Kay on Object Orientation

I didn't like the way Simula I or Simula 67 did inheritance.
So I decided to leave out inheritance as a built-in 
feature until I understood it better.


* Alan Kay on Object Orientation

I'm sorry that I long ago coined the term "objects" for this topic because
it gets many people to focus on the lesser idea. The *big* *idea* is *"messaging"*

The Japanese have a small word -- ma -- for "that which
is in between" -- perhaps the nearest English equivalent is "interstitial"

The key in making great and growable systems is much more to design how its
modules *communicate* rather than what their internal properties and
behaviors should be


* Object Orientation Origin on a Nutshell

- Encapsulation (objects are like cells)
- Messages between objects
- No inheritance
- No polymorphism (it is a subset of the idea)
- Focus on what is between objects, not the form of the objects (morphos/type)


* First Lesson Learned

Giving names ir hard, even for people like Alan Kay =)


* Now when I think about some traditional object oriented languages

.image ./img/tellme.jpg


* That which is in between: Interfaces


* Example: Reading File (or Stream...or whatever)

.image ./img/iointeraction.png _ 700


* What is in between

.image ./img/iointeraction-between.png _ 650


* What types matter ?

.image ./img/iointeraction-types-matter.png _ 750


* What Go enables

.image ./img/iointeraction-go-interfaces.png _ 900


* What Go enables

.image ./img/iointeraction-go-mul-interfaces.png _ 900


* Why is this great ?

- No need for the object implementing an interface to explicit declare it
- The object implementing an interface is also not coupled to which name has been given to a interface (doesn't matter)
- The object implementing an interface is also not coupled to a interface type (doesn't matter)
- For the client, the type (form) of the object implementing an interface is irrelevant
- The focus is on which messages (methods) the client needs and checking if an object has them


* Boils down to responsibilities

- Client just needs to know what it wants, and define an interface
- Service just needs to have methods
- The compiler does the job of checking if the service is compatible with the interface declared by the client
- Low coupling =)


* Flexible and Safe

There is no need to design ahead of time which interfaces you
are going to need.

No need to previously extrapolate how your objects will be used.

Interfaces can be added to communicate with pre-existent objects as
the need arises, in ways you did not foreseen, safely.

Changes on a object that breaks a interface is caught
at compile time with a clear error. No runtime surprises.

Basically the flexibility of a dynamic typed language
with compile time safety of a static one.


* Real life example


* How to get the status code of a exec.Command ?


* Seems trivial...

- Actually not
- Some operational systems uses integers
- Others have strings as the results of a process execution
- Officially exported API on exec.Command don't give access to the status code (only if it failed or not)


* Investigating the error

.code ./code/exiterror.go


* Investigating the ProcessState

.code ./code/processstate.go


* Empty interfaces...


// TODO: some funny meme


* Checking the unix implementation (WaitStatus)

.code ./code/waitstatus.go


* Found it

// TODO: some other funny meme about finding ?


* What about other platforms ?


	syscall % grep -R ExitStatus .
	./syscall_nacl.go:func (w WaitStatus) ExitStatus() int    { return 0 }
	./syscall_bsd.go:func (w WaitStatus) ExitStatus() int {
	./syscall_solaris.go:func (w WaitStatus) ExitStatus() int {
	./syscall_linux.go:func (w WaitStatus) ExitStatus() int {
	./syscall_windows.go:func (w WaitStatus) ExitStatus() int { return int(w.ExitCode) }
	./syscall_plan9.go:func (w Waitmsg) ExitStatus() int { 


* Its Something

// TODO: add its something meme


* Final Solution

.code ./code/exitresult.go


* Final Solution

- This interface was not foreseen by the implementors of the WaitStatus
- Yet it is there (for almost all platforms)
- You can easily leverage that without changing the third party code (in this case the stdlib)
- Sadly on this case the choice of exporting a *interface{}* obligates us to rely on runtime errors =(
- Yet even with runtime cast we can see that we are not checking the object type, but its ability to satisty an interface


* Sources

.link http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html Prototypes vs Classes
.link http://www.purl.org/stefan_ram/pub/doc_kay_oop_en Dr. Alan Kay on the Meaning of “Object-Oriented Programming”
.link https://katcipis.github.io/blog/object-orientation-go/ Object Orientation in Go