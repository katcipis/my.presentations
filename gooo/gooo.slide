Object Orientation in Go
What is object orientation anyway ? Does it matter ?
21 Apr 2018
Tags: software development, software design, paradigms

Tiago Katcipis
Programmer, Neoway
tiagokatcipis@gmail.com
http://github.com/katcipis
@tiagokatcipis

* Agenda

- Where did "Object Oriented" come from ?
- Interfaces as protocols
- A real use case
- What is the purpose of software design ?

* Origins of Object Orientation

- Every "new" thing usually has more than one influence
- It is hard to pinpoint the origin of an idea
- But people insist on being pedantic =D
- Ranting like "Go is not OO"
- So lets be pedantic too

* Who is this guy ?

TODO:IMAGES


* Alan Kay on Object Orientation

At Utah sometime after Nov 66 when, influenced by Sketchpad, Simula, 
the design for the ARPAnet, the Burroughs B5000, and my
*background* in *Biology* and *Mathematics* , I thought of an architecture for 
programming.

It was probably in 1967 when someone asked me what I was 
doing, and I said: "It's object-oriented programming".


* Alan Kay on Object Orientation

I thought of objects being like *biological* *cells* and/or individual 
computers on a network, only able to *communicate* with *messages*.

The term *"polymorphism"* was imposed much later (I think by Peter Wegner) and 
it isn't quite valid, since it really comes from the nomenclature of 
functions, and I wanted quite a bit more than functions.


* Alan Kay on Object Orientation

I didn't like the way Simula I or Simula 67 did inheritance.
So I decided to leave out inheritance as a built-in 
feature until I understood it better.


* Alan Kay on Object Orientation

I'm sorry that I long ago coined the term "objects" for this topic because
it gets many people to focus on the lesser idea. The *big* *idea* is *"messaging"*

Sources

.link http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html Prototypes vs Classes
.link http://www.purl.org/stefan_ram/pub/doc_kay_oop_en Dr. Alan Kay on the Meaning of “Object-Oriented Programming”


* Object Orientation Origin on a Nutshell

- Encapsulation (objects are like cells)
- Messages between objects
- No inheritance
- No polymorphism (it is a subset of the idea)
- Focus on messaging between objects, not the form of the objects (morphos)


* Now when I think about some traditional object oriented languages

.image ./img/tellme.jpg


* Interfaces as protocols

How we can focus on what is in the middle ?