Docker Compose
Easy and fast isolated development environments
29 Aug 2015
Tags: docker, docker-compose, development environment

Tiago Katcipis
tiago.katcipis@neoway.com.br
http://github.com/katcipis


* Agenda

- A word on good development environments
- Docker Compose
- Use case: Black Pearl
- Conclusion


* Dev Env


* Good development environment is

- Traceable
- Scalable
- Orthogonal
- Deterministic
- As near as possible to the production environment
- Easy and fast to setup
- Versioned
- Able to execute integration tests


* Integration testing, the problem

- I need a Redis
- And a RabbitMQ
- And a MongoDB
- Other services developer by other teams
- Microservices makes it worse :-)


* Docker Compose


* What is it ?

- Tool for defining and running multi-container applications with Docker
- Define a multi-container application in a single file
- Then spin your application up in a single command


* Simple example

    web:
      build: .
      ports:
       - "5000:5000"
      volumes:
       - .:/code
      links:
       - redis
    redis:
      image: redis


* Use Case

* Black Pearl

- Web scraping service
- Extension of [[http://scrapy.org/][Scrapy]]
- Get jobs through a queue
- Scraps a site, and push the scraped data on the queue
- Sounds simple :-)


* Dependencies

- Valid proxies: proxy-service
- Valid proxies are on a MongoDB
- We need to break captchas: decaptcha
- Raw source files are saved on S3: rain-man
- Integration with these services is made with Redis
- Jobs input and output is done through a queue, the broker used is RabbitMQ
- A simple scraping test involves all this working


* Gibbon

.image ./images/on-the-internet-no-one-knows-youre-a-gibbon.jpg


* Gibbon

- Gets data from postgres and feeds the job queue
- Gets results from job queue and save on postgres


* Dependencies

- RabbitMQ 
- Postgres


* Overview

.image ./images/blackpearl-overview.png _ 500


* Demos :-)


* Results

- Integration testing, involving multiple services
- Testing happens with same images used on production
- High level of isolation
- Amount of tools a new dev has to install: two (docker and docker-compose)
- More freedom on integrated automated tests
