Docker Compose
Um novo paradigma de desenvolvimento com docker compose
13 May 2015
Tags: docker, docker-compose, ambiente de desenvolvimento, desenvolvimento, dev

Luciano Borguetti, Tiago Katcipis
lucianoborguetti@gmail.com / tiago.katcipis@neoway.com.br
http://github.com/lborguetti / http://github.com/katcipis


* Agenda

- Infraestrutura de desenvolvimento
- Docker
- Usando o Docker
- Docker Compose
- Usando o Docker Compose
- Caso de uso: Neobot


* Infraestrutura de desenvolvimento


* Necessidades

- Facilidade de construção e reprodução
- Rastreabilidade
- Escalabilidade
- Possilidade de testes isolados e de integração
- Execução de testes o mais próximo possível do ambiente produção
- Composição por vários serviços (MongoDB, Redis, RabbitMQ, etc)
- Habilitar um ambiente heterogêneo ?????

* Docker

* Docker?

.image images/TDC2015-docker-logo.png 150 _

- É uma plataforma aberta para o desenvolvimento, transporte e execução de aplicativos
- Virtualização em nível de sistema operacional (>= release 0.9 [[https://github.com/docker/libcontainer][*libcontainer*]]), sem a carga extra de um [[http://en.wikipedia.org/wiki/Hypervisor][*hypervisor*]].
- Isolamento entre os containers utilizando Linux [[http://man7.org/linux/man-pages/man7/namespaces.7.html][*namespaces*]]
- [[https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt][*Cgroups*]] para compartilhar e limitar recurso de hardware entre os containers
- [[http://unionfs.filesystems.org/][*UnionFS*]] para criação de [[https://docs.docker.com/terms/layer/][*layers*]]
- Permite tratar a sua infra-estrutura como código

* Usando o Docker

* Primeira idéia

.image images/TDC2015-docker-all-the-things.png 250 300

- Ambiente de desenvolvimento isolado usando Docker
- Container docker eh construido com todas as ferramentas necessárias
- Rastreabilidade e isolamento no build e execução dos testes
- Parece bom testes unitários, mas como fazer testes de integração ?

* Como testar integração ?

- Preciso de um Redis
- E um RabbitMQ
- E um MongoDB
- E um outro serviço qualquer desenvolvido in-house
- Com microserviços isso só piora :-)

* Insistindo apenas em um container

- Colocar todos os serviços junto no seu container de desenvolvimento
- Como parar / reiniciar um serviço especifico ?
- Como avaliar o log de cada um dos serviços isoladamente ?
- Docker não foi feito para executar mais de um serviço por container (Exemplo: docker stop/logs)
- Dificilmente próximo do ambiente final de produção :-(

* Docker Linking

- Permite de forma segura acesso entre os containers;

.image images/TDC2015-docker-link.jpg 520 _

* Idéia melhor !!!

E se usarmos o mecanismo de linking do docker para conectar vários containers e construir um ambiente
bem próximo ao de produção ?

Algo como:

    docker run -d --name myredis redis
    docker run -d --name myapp --link myredis:myredis example/myapp ./myapp

Executando testes de integração:

    docker run --name myapptests --link myapp:myapp example/myapp-tests ./myapp-tests

* Conclusão

- Conseguimos fazer testes bem próximos ao ambiente de produção. Usando as mesmas imagens do Docker que serão utilizadas em produção.
- Esses testes integram vários serviços porém são isolados, cada desenvolvedor executa os containers na sua própria máquina.
- Mitigando o tradicional "funciona na minha máquina" :-).
- O gerenciamento desses containers não parece ser muito simples, principalmente se começarmos a envolver mais serviços.

* Docker Compose (KLB, explica essa droga de linkar containers)

* Usando o Docker Compose (Katcipis explicará isso :D, se vc quiser pode fazer também)

* Caso de uso: Neobot
